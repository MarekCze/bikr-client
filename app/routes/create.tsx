import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, KeyboardAvoidingView, Platform, Alert } from 'react-native';
import { useRouter } from 'expo-router';
import { ThemedView } from '../../components/ThemedView';
import { Route } from '@bikr/shared/src/types/event';
import { SupabaseEventRepository } from '../../repositories/SupabaseEventRepository';
import { RoutePlanner } from '../../components/map';
import { useAuth } from '../../hooks/useAuth';

/**
 * Create a new route screen
 */
export default function CreateRouteScreen() {
  const router = useRouter();
  const { session } = useAuth();
  const [saving, setSaving] = useState(false);

  // Initialize repository
  const eventRepository = new SupabaseEventRepository();

  const handleSaveRoute = async (newRoute: Route) => {
    if (!session?.user?.id) {
      Alert.alert('Error', 'You must be logged in to create a route');
      return;
    }

    setSaving(true);
    try {
      // Set the user as the route creator and omit the id property since it will be generated by the server
      const { id, ...routeWithoutId } = newRoute;
      const routeToCreate = {
        ...routeWithoutId,
        createdBy: session.user.id
      };
      
      await eventRepository.createRoute(routeToCreate);
      Alert.alert('Success', 'Route created successfully', [
        { text: 'OK', onPress: () => router.back() }
      ]);
    } catch (error) {
      console.error('Error creating route:', error);
      Alert.alert('Error', 'Failed to create route. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  return (
    <ThemedView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardAvoidingView}
      >
        <ScrollView contentContainerStyle={styles.scrollContainer}>
          <RoutePlanner
            onRouteSaved={handleSaveRoute}
            initialRoute={{
              id: `route_${Date.now()}`,
              name: 'New Route',
              description: '',
              distance: 0,
              estimatedDuration: 0,
              startPoint: {
                id: '',
                name: 'Start Point',
                address: '',
                city: '',
                country: '',
                latitude: 0,
                longitude: 0,
              },
              endPoint: {
                id: '',
                name: 'End Point',
                address: '',
                city: '',
                country: '',
                latitude: 0,
                longitude: 0,
              },
              waypoints: [],
              createdBy: session?.user?.id || '',
              createdAt: new Date().toISOString(),
              updatedAt: new Date().toISOString(),
            }}
          />
        </ScrollView>
      </KeyboardAvoidingView>
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollContainer: {
    flexGrow: 1,
  },
});
